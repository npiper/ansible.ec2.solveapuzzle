---
# AWS tasks are run 'locally'

# Authentication details should be passed in as arguments or exported in the shell before running this playbook
# Ideally they should be stored in Hashicorp's 'Vault'
# e.g.
# export AWS_ACCESS_KEY_ID='my-access-key123'
# export AWS_SECRET_ACCESS_KEY='sekrit23418'
#
# Run with `ansible-playbook -i testing infra.yml`

# EXERCISE 9.1 - 9.5 of AWS Advanced Networking
# Create advanced networking

## Create a VPC - non default
- name: CREATE AWS ENVIRONMENT
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    # t3 has enhanced networking
    instance_type: t3.nano
    placement_instance_type: m4.large
    ec2_count: 1
    ec2_image: ami-07f2bbf97bdf932e6
    server_script: "{{lookup('file', 'network-server.sh')}}"
    client_script: "{{lookup('file', 'network-client.sh')}}"


  tasks:
  - name: Create VPC
    ec2_vpc_net:
     name: vpc-{{ domain_name }}
     cidr_block: 10.0.0.0/16
     region: "{{ aws_region }}"
     dns_support: true
     dns_hostnames: true
     tags:
       module: ansible ec2_vpc_net
       domain_name: "{{ domain_name }}"
       context: "{{ context }}"
     tenancy: default
     state: present
    register: avpc

  - name: create a new ec2 key pair 'network_keypair', returns generated private key
    ec2_key:
      name: network_keypair
      region: "{{ aws_region }}"
      force: false
    register: network_key_result

  - name: Save private network key in a local safe space
    copy: content="{{ network_key_result.key.private_key }}" dest="./aws.network.{{ domain_name }}.pem" mode=0400
    when: network_key_result.changed

  - name: Create Internet Gateways
    ec2_vpc_igw:
      vpc_id: "{{ avpc.vpc.id }}"
      state: present
    register: igw

  - name: Find my public ip
    uri:
      url: http://ifconfig.me/ip
      return_content: yes
    register: ip_response

## 2 Subnets
# subnets
  - name: Create Public Subnet's
    ec2_vpc_subnet:
      state: present
      vpc_id: "{{ item.vpcid }}"
      cidr: "{{ item.cidr }}"
      az: "{{ item.az }}"
      region: "{{ aws_region }}"
      resource_tags:
        Name: "{{ item.name }}"
    loop:
      - { name: 'Public Subnet A', vpcid: "{{ avpc.vpc.id }}" , cidr: '10.0.1.0/27', az: "{{ aws_region }}a" }
      - { name: 'Public Subnet B', vpcid: "{{ avpc.vpc.id }}", cidr: '10.0.16.0/27', az: "{{ aws_region }}b" }
      - { name: 'Public Subnet C', vpcid: "{{ avpc.vpc.id }}", cidr: '10.0.32.0/27', az: "{{ aws_region }}c" }
    register: subnets

  - name: Write subnet results
    copy: content="{{ subnets }}" dest=./subnets.json

  - name: Set up public subnet route table
    ec2_vpc_route_table:
      vpc_id: "{{ avpc.vpc.id }}"
      region: "{{ aws_region }}"
      tags:
        Name: "Networking test route table"
      subnets:
        - "{{ subnets.results[0].subnet.id }}"
        - "{{ subnets.results[1].subnet.id }}"
        - "{{ subnets.results[2].subnet.id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id }}"
    register: routetable


# Security Group for Network testing
  - name: Create SG's in each VPC
    ec2_group:
      name: "network-SG"
      description: "Security Group for Network testing"
      vpc_id: "{{ avpc.vpc.id }}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: "{{ ip_response.content }}/32"
        - proto: tcp
          from_port: 80 # icmp type, -1 = any type
          to_port:  80 # icmp subtype, -1 = any subtype
          cidr_ip: "0.0.0.0/0"
        - proto: tcp
          from_port: 5201
          to_port: 5201
          cidr_ip: "0.0.0.0/0"
        - proto: icmp
          from_port: 8 # icmp type, -1 = any type
          to_port:  -1 # icmp subtype, -1 = any subtype
          cidr_ip: 10.0.0.0/16
    register: security_groups

  - name: Create EC2 instances in each Subnet
    ec2:
      key_name: network_keypair
      instance_type: "{{ instance_type }}"
      image: "{{ ec2_image }}"
      region: "{{ aws_region }}"
      group: network-SG
      wait: yes
      count: 1
      vpc_subnet_id: "{{ item.subnet }}"
      assign_public_ip: yes
      user_data: "{{ item.script }}"
      instance_tags:
        type: vpn
        description: eu-west-1 Amazon ECS-optimized Amazon Linux 2
        role: "{{ item.role }}"
    loop:
      - {subnet: "{{ subnets.results[0].subnet.id }}", role: "client", script: "{{ client_script }}"}
      - {subnet: "{{ subnets.results[1].subnet.id }}", role: "client", script: "{{ client_script }}" }
      - {subnet: "{{ subnets.results[2].subnet.id }}", role: "server", script: "{{ server_script }}" }

## What it can do - run a speed test on a Client to the Server
## SSH to client - run `./iperf3 -t 10 -c <private IP of Server>`

  - name: Create Placement Group for test
    ec2_placement_group:
      name: fast-cluster
      state: present
      region: "{{ aws_region }}"
      strategy: cluster
    register: place_group


  - name: Create EC2 instances in each Subnet
    ec2:
      key_name: network_keypair
      instance_type: "{{ placement_instance_type }}"
      image: "{{ ec2_image }}"
      region: "{{ aws_region }}"
      group: network-SG
      placement_group: fast-cluster
      wait: yes
      count: 1
      vpc_subnet_id: "{{ subnets.results[0].subnet.id }}"
      assign_public_ip: yes
      user_data: "{{ item.script }}"
      instance_tags:
        type: vpn
        location: placement_group
        description: eu-west-1 Amazon ECS-optimized Amazon Linux 2
        role: "{{ item.role }}"
    loop:
      - {subnet: "{{ subnets.results[0].subnet.id }}", role: "client", script: "{{ client_script }}"}
      - {subnet: "{{ subnets.results[1].subnet.id }}", role: "client", script: "{{ client_script }}" }
      - {subnet: "{{ subnets.results[2].subnet.id }}", role: "server", script: "{{ server_script }}" }
