---
# AWS tasks are run 'locally'

# Authentication details should be passed in as arguments or exported in the shell before running this playbook
# Ideally they should be stored in Hashicorp's 'Vault'
# e.g.
# export AWS_ACCESS_KEY_ID='my-access-key123'
# export AWS_SECRET_ACCESS_KEY='sekrit23418'
#
# Run with `ansible-playbook -i testing infra.yml`

# EXERCISE 10.6 of AWS Advanced Networking
# Create a Pipeline that does a Cloudfront deploy

## Create a VPC - non default
- name: CREATE AWS ENVIRONMENT
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    instance_type: t2.nano
    ec2_count: 1


  tasks:
  - name: Create EC2 Role for CloudFormation execution
    iam_role:
        name: CloudFormation-NetAuto
        state: present
        assume_role_policy_document: "{{ lookup('file','cloudformation/cloudformation_assume_role.json') }}"
        managed_policy:
          - arn:aws:iam::aws:policy/PowerUserAccess
    register: ec2role_cf

  - name: Create EC2 Role for CodePipeline execution
    iam_role:
        name: CodePipeline-NetAuto
        state: present
        assume_role_policy_document: "{{ lookup('file','cloudformation/codedeploy_assume_role.json') }}"
        managed_policy:
          - arn:aws:iam::aws:policy/PowerUserAccess
    register: ec2role_cp

  - name: Create a code repository in an S3 bucket
    aws_s3:
        bucket: dev.neilpiper.me.cloudfrontbucket
        object: /networkcert/cloudformation/vpc.yml
        src: ./cloudformation/vpc.yml
        mode: put

  - name: Enable versioning on the bucket
    s3_bucket:
       name: dev.neilpiper.me.cloudfrontbucket
       state: present
       versioning: yes

## arn "{{ ec2role_cp.arn }}"

  - name: Create a code pipeline - use s3 bucket location
    aws_codepipeline:
      name: my_deploy_pipeline
      role_arn: "{{ ec2role_cp.arn }}"
      artifact_store:
        type: S3
        location: dev.neilpiper.me.cloudfrontbucket
      region: "{{ aws_region }}"
      state: present
      stages:
        - name: Get_source_s3
          actions:
            -
              name: S3_pull
              actionTypeId:
                category: Source
                owner: AWS
                provider: S3
                version: '1'
              outputArtifacts:
                - { name: my-app-source }
              configuration:
                S3Bucket: dev.neilpiper.me.cloudfrontbucket
                S3ObjectKey: networkcert/cloudformation/vpc.yml
              runOrder: 1
        - name: Cloudfront_deploy
          actions:
            -
              name: Cloudfront_deploy
              actionTypeId:
                category: Deploy
                owner: AWS
                provider: CloudFormation
                version: '1'
              inputArtifacts:
                - { name: my-app-source }
              configuration:
                # an AWS Cloud Formation stack to create
                ActionMode: CREATE_UPDATE
                StackName: NetAuto
                RoleArn: "{{ ec2role_cf.arn }}"
