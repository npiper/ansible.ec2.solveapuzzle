---
# AWS tasks are run 'locally'

# Authentication details should be passed in as arguments or exported in the shell before running this playbook
# Ideally they should be stored in Hashicorp's 'Vault'
# e.g.
# export AWS_ACCESS_KEY_ID='my-access-key123'
# export AWS_SECRET_ACCESS_KEY='sekrit23418'
#
# Assumption: You have run the infra playbook ahead of this
# Run with `ansible-playbook -i testing security.yml`
# Syntax check: ansible-playbook --syntax-check -i ../testing security.yml
# Dry Run: ansible-playbook --check -i ../testing security.yml

## Create a VPC - non default
- name: CREATE AWS ENVIRONMENT
  hosts: localhost
  connection: local
  gather_facts: False

  tasks:
    - name: Lookup VPC
      ec2_vpc_net_facts:
        region: "{{ aws_region }}"
        filters:
          "tag:Name": vpc-{{ domain_name }}
      register: vpc_facts

    - name: Set VPC ID in variable
      set_fact:
          vpc_id: "{{ vpc_facts.vpcs[0].id }}"

    - name: Create private security subnet in VPC 10.0.8.0
      ec2_vpc_subnet:
            vpc_id: "{{ vpc_id }}"
            region: "{{ aws_region }}"
            cidr: 10.0.8.0/28
            az: "{{ aws_region }}a"
            resource_tags:
              Name: Security Domain Private Subnet 1A
              zone: private
              context: "{{ context }}"
              threat: high
              domain: security
            state: present
      register: sec_subnet_1a

    - name: Set Security Private Subnet ID in variable
      set_fact:
         sec_private_subnet_id: "{{ sec_subnet_1a.subnet.id }}"

    # A security group that exposes admin ports of Security services
    - name: Create admin sec Group
      ec2_group:
        name: AdminSecurityGroup
        description: Security Domain Admin security group
        vpc_id: "{{ vpc_id }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 10.0.8.0/28
            rule_desc: Allow basic HTTP port 80 access from this subnet
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 10.0.8.0/28
            rule_desc: Allow basic ssh access from this subnet
            #ports:
            #- 8080
            #- 443
            #- 9443
            # -22 / 10.0.8.0/0
            #rule_desc: allow HTTP Admin ports (80, 443, 9443 from Internal subnet and ssh from inside the security domain

    # A security group that exposes standard ports of Security services
    - name: Create domain sec Group
      ec2_group:
        name: DomainSecurityGroup
        description: Security Domain security group
        vpc_id: "{{ vpc_id }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 10.0.0.0/16
            rule_desc: Allow basic port 80 access from all internal domains
            #rule_desc: allow all on port 80, 443, 9443 from Internal subnet

    - name: Create Domain Security role
      iam_role:
        name: security_domain_role
        assume_role_policy_document: "{{ lookup('file','security_user_policy.json') }}"
        state: present
        managed_policy:
          - arn:aws:iam::aws:policy/AWSCertificateManagerPrivateCAReadOnly
          - arn:aws:iam::aws:policy/SecretsManagerReadWrite

        #description: Security domain User role

    - name: Create Security Admin Role
      iam_role:
        name: security_admin_role
        assume_role_policy_document: "{{ lookup('file','security_admin_policy.json') }}"
        state: present
        managed_policy:
          - arn:aws:iam::aws:policy/AWSKeyManagementServicePowerUser
          - arn:aws:iam::aws:policy/service-role/AWSShieldDRTAccessPolicy
          - arn:aws:iam::aws:policy/AWSCertificateManagerFullAccess
          - arn:aws:iam::aws:policy/IAMFullAccess
          - arn:aws:iam::aws:policy/SecretsManagerReadWrite
          - arn:aws:iam::aws:policy/IAMUserSSHKeys
        #description: Security domain Administrator role

    - name: Create VPN subnet
      debug:
        msg: "TO DO: Create A VPN subnet"

    - name: Create Virtual private gateway
      debug:
        msg: "TO DO: Create A Virtual private gateway"


    - name: Create route table including VPN
      debug:
        msg: "TO DO: Create Route table with the VPN"

    - name: Create Secure S3 Bucket for sec domain
      debug:
        msg: "TO DO: Create S3 Bucket for sec domain"

    ##- name: Store assets in S3 bucket (Backup)


    - name: Create Amazon Secret management service
      debug:
        msg: "TO DO: Register an Amazon Secret management service"

    - name: Amazon KMS
      debug:
        msg: "TO DO: Register an Amazon Key management service"

    - name: Store Certs in Secret management
      debug:
        msg: "TO DO: Store Certificates in Secret management"

    - name: Store Private keys in KMS
      debug:
        msg: "TO DO: Store Private keys in Key management services"

    ##- name: Create Encryption key for domain (Label)


    ##- name: Create EC2 Key Pair

    ##- name: Create Security EBS Volume (Encrypted )

    ##- name: Deploy AMI's

  ##  - name: Establish Cloudwatch monitoring

  ##  - name: Create DDOS AWS Shield
